<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS面试题</title>
    <url>/2020/12/18/JS%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h4 id="1-简述异步和异步的区别"><a href="#1-简述异步和异步的区别" class="headerlink" title="1.简述异步和异步的区别"></a>1.简述异步和异步的区别</h4><ul>
<li>同步：浏览器访问服务器请求，页面刷新，新内容出现，进行下一步操作</li>
<li>异步：浏览器访问服务器请求，用户正常操作，浏览器进行请求，页面不刷新，新内容出现，用户看到新内容</li>
</ul>
<h4 id="2-怎么添加、移除、复制、创建、和查找节点"><a href="#2-怎么添加、移除、复制、创建、和查找节点" class="headerlink" title="2.怎么添加、移除、复制、创建、和查找节点"></a>2.怎么添加、移除、复制、创建、和查找节点</h4><p> 1.创建新节点：</p>
<ul>
<li>createDocumentFragment() 创建一个DOM片段</li>
<li>createElement() 创建一个具体的节点</li>
<li>createTextNode() 创建一个文本节点</li>
</ul>
<p> 2.添加、移除、替换、插入</p>
<ul>
<li>appendChild()</li>
<li>removeChild()</li>
<li>replaceChild()</li>
<li>insertBefore()</li>
</ul>
<p> 3.查找</p>
<ul>
<li><p>getElementsByTagName() 通过标签名获取</p>
</li>
<li><p>getElementsByName() 通过元素的name属性获取</p>
</li>
<li><p>getElementById() 通过元素ID获取</p>
<h4 id="3-实现一个函数clone可以对JavaScript中的五种主要数据类型（Number、string、Object、Array、Boolean）进行复制"><a href="#3-实现一个函数clone可以对JavaScript中的五种主要数据类型（Number、string、Object、Array、Boolean）进行复制" class="headerlink" title="3.实现一个函数clone可以对JavaScript中的五种主要数据类型（Number、string、Object、Array、Boolean）进行复制"></a>3.实现一个函数clone可以对JavaScript中的五种主要数据类型（Number、string、Object、Array、Boolean）进行复制</h4></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.clone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="built_in">this</span>.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> e <span class="keyword">in</span> <span class="built_in">this</span>) &#123;</span><br><span class="line">        o[e] = <span class="keyword">typeof</span> <span class="built_in">this</span>[e] === <span class="string">&quot;object&quot;</span> ? <span class="built_in">this</span>[e].clone() : <span class="built_in">this</span>[e]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-如何消除一个数组里的重复的元素"><a href="#4-如何消除一个数组里的重复的元素" class="headerlink" title="4.如何消除一个数组里的重复的元素"></a>4.如何消除一个数组里的重复的元素</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qc</span>(<span class="params">arr1</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.indexOf(arr1[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            arr.push(arr1[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-写一个返回闭包的函数"><a href="#5-写一个返回闭包的函数" class="headerlink" title="5.写一个返回闭包的函数"></a>5.写一个返回闭包的函数</h4><p><strong>闭包</strong>是JavaScript的一个难点，很多高级应用都需要依赖闭包实现。闭包就是能够读取其他函数内部变量的函数。可以把闭包简单的<br>理解成“定义在一个函数内部的函数”。</p>
<p>闭包有三个特性：</p>
<ol>
<li>函数嵌套函数。</li>
<li>函数内部可以引用外部的参数和变量。</li>
<li>参数和变量不会被垃圾回收机制回收。</li>
</ol>
<p>闭包就是一个函数的返回值是另一个函数，在outer外部可以通过这个返回的函数访问outer内部的局部变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        val += <span class="number">1</span></span><br><span class="line">        <span class="built_in">document</span>.write(val + <span class="string">&#x27;&lt;br /&gt;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> outObj = outer()</span><br><span class="line">outObj() <span class="comment">//1 执行val+=1后，val还在</span></span><br><span class="line">outObj() <span class="comment">//2</span></span><br><span class="line">outObj = <span class="literal">null</span> <span class="comment">//val 被回收</span></span><br><span class="line"><span class="keyword">var</span> outObj1 = outer()</span><br><span class="line">outObj1()<span class="comment">//1</span></span><br><span class="line">outObj1()<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>闭包会使变量始终保存在内存中，如果不当使用会增大内存消耗。<br>JavaScript的垃圾回收机制：</p>
<ol>
<li>在JavaScript中，如果一个对象不再被引用，那么这个对象就会被GC回收。</li>
<li>如果两个对象相互引用，而不再被第三者所引用，那么这两个互相引用的对象也会被回收。</li>
</ol>
<p>使用闭包的好处：</p>
<ol>
<li>希望一个变量长期驻扎在内存中</li>
<li>避免全局变量的污染</li>
<li>私有成员的存在</li>
</ol>
]]></content>
      <tags>
        <tag>面试题</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>IE8-9浏览器文件上传下载兼容问题笔记</title>
    <url>/2019/12/19/IE8-9%E6%B5%8F%E8%A7%88%E5%99%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="1-IE8-9文件上传"><a href="#1-IE8-9文件上传" class="headerlink" title="1.IE8-9文件上传"></a>1.IE8-9文件上传</h4><ol>
<li>IE8-9使用ajaxSubmit不支持Content-Type: “application/json”，IE遇到不支持的请求头会自动更改</li>
<li>IE8-9可以使用form表单上传文件，form表单无法设置请求头</li>
</ol>
<h4 id="2-IE8-9文件下载"><a href="#2-IE8-9文件下载" class="headerlink" title="2.IE8-9文件下载"></a>2.IE8-9文件下载</h4><ol>
<li>IE8-9不支持Blob，可以让后端返回文件路径，使用window.open触发下载</li>
<li>IE8-9 window.open 被禁用时，可以采用iframe（注意iframe跨域）</li>
</ol>
]]></content>
      <tags>
        <tag>IE兼容</tag>
        <tag>文件上传下载</tag>
      </tags>
  </entry>
  <entry>
    <title>git相关</title>
    <url>/2020/01/12/git%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: No configured push description.</span><br></pre></td></tr></table></figure>
<p>原因：缺少推送的目标地址</p>
<p>解决办法：</p>
<p>1.添加目标地址参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push git@github.com:billfeller&#x2F;historyBrowsing.git</span><br></pre></td></tr></table></figure>
<p>2.设置默认参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin 目标仓库地址</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>react声明周期函数</title>
    <url>/2020/12/21/react%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="初始化阶段："><a href="#初始化阶段：" class="headerlink" title="初始化阶段："></a>初始化阶段：</h4><ul>
<li>getDefaultProps: 获取实例的默认属性</li>
<li>getInitialState: 获取每个实例的初始化状态</li>
<li>componentWillMount: 组件将被渲染到页面上</li>
<li>render: 组件在这里生成虚拟的DOM节点</li>
<li>componentDidMount: 组件真正被装载之后</li>
</ul>
<h4 id="运行中状态"><a href="#运行中状态" class="headerlink" title="运行中状态"></a>运行中状态</h4><ul>
<li>componentWillReceiveProps: 当props发生变化时触发，初始化render时不触发</li>
<li>shouldComponentUpdate: 首次初始化不触发，当props或者state发生变化时触发，在render之前，当新的props或state不需要更新时，返回false</li>
<li>componentWillUpdate: 当props和state发生变化时触发，并且在render之前执行，首次初始化不触发，特别注意，在这个函数中，不能使用this.setState来修改状态。<br>这个函数之后，就会把nextProps和nextState分别设置到this.props和this.state中，紧接着这个函数，就会调用render()来更新界面了。</li>
<li>render: 组件重绘</li>
<li>componentDidUpdate: 组件更新后触发，首次render时不触发。</li>
</ul>
<h4 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h4><ul>
<li>componentWillUnmount: 组件即将销毁</li>
</ul>
]]></content>
      <tags>
        <tag>面试题</tag>
        <tag>react</tag>
        <tag>生命周期</tag>
      </tags>
  </entry>
</search>
